- name: launch aws ec2 instance
  hosts: localhost
 
  vars:
     key_name: sl_ansible

  tasks:
  #  - name: Obtain default VPC
  #      ec2_vpc_net_facts:
  #      filters:
  #        "isDefault": "true"
  #    register: default_vpc

   - name: Create security group
     ec2_group:
        name: tomcat_sec_group
        description: sec group for demo
        #description: "Sec group for "{{ id }}""
        # vpc_id: 12345
        region: us-east-1
        aws_access_key: "{{ my_access_key }}"
        aws_secret_key: "{{ my_secret_key }}"
        aws_security_token: "{{ my_security_token }}"
        rules:
          - proto: tcp
            ports:
              - 22
              - 80
              - 8080
            cidr_ip: 0.0.0.0/0
            rule_desc: allow all on ssh port
     register: result_sec_group
  
   - name: ec2 instance create
     ec2:
        aws_access_key: "{{ my_access_key }}"
        aws_secret_key: "{{ my_secret_key }}"
        aws_security_token: "{{ my_security_token }}"
        key_name: "{{ key_name }}"
        group_id: "{{ result_sec_group.group_id }}"
        instance_type: t2.micro
        image: ami-0279c3b3186e54acd
        region: us-east-1
        count: 1
        wait: yes
        instance_tags:
         Name: tomcat
     register: ec2

   - name: Add the newly created EC2 instance(s) to the local host group
     ansible.builtin.lineinfile:
        path: "hosts.ini"
        create: yes
        line: "[web]"
        insertafter: "[web]" 
        line: "{{ item.public_ip }} ansible_user=ubuntu ansible_ssh_private_key_file=keys/{{ key_name }}.pem ansible_ssh_extra_args='-o StrictHostKeyChecking=no'"
     with_items: "{{ ec2.instances }}"

   - name: Wait for the instances to boot by checking the ssh port
     wait_for: host={{item.public_dns_name}} port=22 delay=60 timeout=320 state=started
     with_items: "{{ ec2.instances }}"

  #  - name: Create inventory of hosts to be configured 
  #    add_host:
  #       hostname: "{{ item.public_ip }}"
  #       groupname: tomcat
  #    with_items: "{{ ec2.instances }}"